// Catalogue Particles.txt
// G. Landini at bham. ac. uk 11/5/2006
// 1/Jul/2007 bugfixes for results table types
// 2/Jun/2008 wrong table bugfix
// 25/Mar/2009 tidy up
// 27/Apr/2009 fixed bug using particle analyzer
// 2/Jun/2009 fixed wand
// 18/Feb/2014 added 32bit support
// 12/Jan/2016 fixed incomplete pasting region bug
// 26/Jan/2016 cleaning code
//
// This macro creates a Catalog of particles that can be ordered
// according to some recorded morphometrical parameter.
// It uses the Results table generated by either the built in Particle
// Analyzer or the Particles8_ plugin.
//
// If using the Particle Analyzer, it needs the image thresholded (i.e. in red)
// at the same grey levels used to generate the Results table (otherwise the ROIs
// will not match). It also needs to record the 'Bounding Rectangle' in Set Measurements...
// and 'Record Starts' in the Particle Analyzer.
//
// If using the Particles8_ plugin, it needs the binary image used to generate the
// Results table.
//
// The macro can redirect the processing to other images to produce catalogs
// based on 8 bit grey or RGB images, instead of the thresholded or binary particle 
// ones.
//
// Please report back any problems.

title=getTitle();
run("Select None");

if (!isOpen("Results"))
 exit("No Results window found. Please run Analyze Particles or Particles8.");

// To generate the results table:
// run("Set Measurements...", "area perimeter bounding circularity integrated limit redirect=None decimal=3");
// run("Analyze Particles...", "size=0-Infinity circularity=0.00-1.00 show=Nothing display clear record");
// or
// run("Particles8 ", "white morphology show=Particles minimum=0 maximum=999999 display redirect=None overwrite");
//
// Make sure that you redirect the analysis to the appropriate image, if required.

selectWindow("Results");
text = getInfo();
lines = split(text, "\n");
columns = split(lines[0], "\t");

if (columns[0]==" ")
 columns[0]= "#";

index=newArray(nResults);
param=newArray(nResults);

imagen=newArray(nImages);

tableType="";

for (i=0;i<columns.length;i++) {
   if (columns[i]=="BX")
      tableType="Particle_Analyzer";
   if (columns[i]=="ROIX1")
      tableType="Particles8_";
}

if (tableType=="")
  exit("Unrecognised Results table\nRun the Particle Analyzer (with 'Bounding Rectangle'\nand 'Record Starts') or the Particles8 plugin (with\nthe \'morphology\' option).");

imagen[0]=title;
j=0;
setBatchMode(true);
for (i=1;i<=nImages();i++) {
  selectImage(i);
  temp=getTitle();
  if (temp!=title)
      imagen[++j]=temp;
}
setBatchMode(false);
selectWindow(title);

Dialog.create("Catalog");
Dialog.addMessage("Catalog particles");
Dialog.addMessage(tableType+" table");
Dialog.addChoice("Sort", columns, columns[35]);
Dialog.addChoice("Order", newArray("Ascending","Descending"));
Dialog.addChoice("Redirect",imagen);
if (tableType!="Particle_Analyzer")
   Dialog.addChoice("Extract", newArray("Wand","ROI","Circle"));
Dialog.addCheckbox("Include_Values", false);
Dialog.addCheckbox("Montage", true);
Dialog.addChoice("Background", newArray("Black","White","Grey","Ramp"));
Dialog.addCheckbox("Align along Feret (will interpolate)", false);
Dialog.addCheckbox("Keep_stack", true);
Dialog.show();

par=Dialog.getChoice();
order=Dialog.getChoice();
redir=Dialog.getChoice();

if (tableType!="Particle_Analyzer")
  shape=Dialog.getChoice();
else
 shape="Wand";

values=Dialog.getCheckbox();
montage=Dialog.getCheckbox();
col=Dialog.getChoice();
align=Dialog.getCheckbox();
keep=Dialog.getCheckbox();

maxw=0;
maxh=0;
maxr=0;

for (i=0; i<nResults; i++) {
   index[i]=i;
   if (tableType=="Particle_Analyzer"){
      //Particle Analyzer table
      w= getResult('Width',i)+2;
      h= getResult('Height',i)+2;
   }
   else{
     //Particles8 table
     w=(getResult('ROIX2',i) - getResult('ROIX1',i))+3 ;
     h=(getResult('ROIY2',i) - getResult('ROIY1',i))+3 ;
     r=getResult('MBCRadius', i);
     if(r>maxr) maxr=r;
   }

   if (w>maxw) maxw=w;
   if (h>maxh) maxh=h;
}

if (par!="Number"){
  for (i=0; i<nResults; i++) {
    param[i]=getResult(par,i);
  }

 //simple sort 
 sw=true;
 if(order=="Ascending"){
    while (sw){
     sw=false;
     for(j=0;j<nResults-1;j++){
       if (param[j]>param[j+1]){
        temp=param[j];
        param[j]=param[j+1];
        param[j+1]=temp;

        temp=index[j];
        index[j]=index[j+1];
        index[j+1]=temp;
        sw=true;
       }
     }
    }
 }
 else{
  while (sw){
   sw=false;
   for(j=0;j<nResults-1;j++){
    if (param[j]<param[j+1]){
     temp=param[j];
     param[j]=param[j+1];
     param[j+1]=temp;

     temp=index[j];
     index[j]=index[j+1];
     index[j+1]=temp;
     sw=true;
    }
   }
  }
 }
}

setPasteMode("Copy");

selectWindow(redir);
bits=bitDepth();

backg=col;
if (col=="Grey")
   backg="Black";

 if (shape=="Circle"){
    maxw=maxr*2+1;
    maxh=maxr*2+1;
}

if (bits==8)
  newImage("Catalog", "8-bit "+backg, maxw, maxh, nResults);
if (bits==24)
  newImage("Catalog", "RGB "+ backg, maxw, maxh, nResults);
if (bits==32)
  newImage("Catalog", "32-bit "+ backg, maxw, maxh, nResults);

if (col=="Grey")
  run("Add...", "stack value=127");

setSlice(1);

setBatchMode(true);

selectWindow(title);
run("Select None");
 
for (i=0; i<nResults; i++) {
  selectWindow(title);
  if (shape=="Wand"){
    x=getResult('XStart',index[i]);
    y=getResult('YStart',index[i]);
    doWand(x,y,0,"8-connected");
  }

 if (shape=="ROI"){
        makeRectangle(getResult('ROIX1', index[i]), getResult('ROIY1', index[i]), ((getResult('ROIX2', index[i]) - getResult('ROIX1', index[i]))+3), ((getResult('ROIY2', index[i]) - getResult('ROIY1', index[i]))+3) );
 }

 if (shape=="Circle"){
        r=getResult('MBCRadius', index[i]);
        makeOval(getResult('MBCX', index[i])-r, getResult('MBCY', index[i])-r, r*2+1, r*2+1);
 }

  roiManager("add");
  selectWindow(redir);
  roiManager("select", 0);
  run("Copy");
  run("Select None");
  wait(10);
  selectWindow("Catalog");
  setSlice(i+1);
  run("Select None");
  run("Paste");
  run("Select None");


  if (align) {
  //------------------------------------ 
  // rotate according to Feret (will interpolate!)
  //------------------------------------
     fx1=getResult('FeretX1',index[i]);
     fy1=getResult('FeretY1',index[i]);
     fx2=getResult('FeretX2',index[i]);
     fy2=getResult('FeretY2',index[i]);
     a=45-atan2( (fy2-fy1),(fx2-fx1))*(180/PI);
     run("Arbitrarily...", "angle="+a+" interpolation=Bicubic fill");
  //------------------------------------
  }

  setMetadata(""+(index[i]+1));
  roiManager("delete");
}

if (values) {
   if (par=="Number" || par=="Slice")  
       maxh+=12;
   else
       maxh+=24;

if (col=="White"){
  run("Invert", "stack");
  run("Canvas Size...", "width="+maxw+" height="+maxh+" position=Top-Center zero");
  run("Invert", "stack");
  setColor(0);
}
else
  run("Canvas Size...", "width="+maxw+" height="+maxh+" position=Top-Center zero");

  setFont("SanSerif", 10,  "antiliased");
  setJustification("center");
  for (i=0; i<nResults; i++) {
   setSlice(i+1);
   if (par=="Number" || par=="Slice") 
      drawString(" "+(index[i]+1), maxw/2, maxh);
   else{
      drawString(" "+(index[i]+1), maxw/2, maxh-11);
      drawString(" "+d2s(param[i],4), maxw/2, maxh);
   }
  }
}
setBatchMode(false);
run("Select None");
selectWindow(title);
run("Select None");
selectWindow("Catalog");
setSlice(1);

if (montage){
  run("Make Montage...", " scale=1 increment=1 border=0");
  rename("Catalog by "+par);
}
if(!keep){
  selectWindow("Catalog");
  close();
}
